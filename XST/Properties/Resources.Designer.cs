//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XST.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XST.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 [
        ///    &quot;Spigot#[插件服]Spigot 是 CraftBukkit 服务端之后的延续版本,比 CraftBukkit 优化了不少地方,支持 CraftBukkit 的插件,性能比 CraftBukkit 好很多,并且自带反作弊功能&quot;,
        ///    &quot;Akarin#[插件服]Akarin是一款支持多线程的 Minecraft 服务端,来自 “新维度”,前身是 TorchSpigot 服务端 注意:1 13 2版本仍未完善,还存在一些bug,在稳定前不建议用于生产环境&quot;,
        ///    &quot;Cauldron#[MOD+插件服]KCauldron/Cauldron 是一个可以装 Mod 的服务端,同时支持 Bukkit 插件&quot;,
        ///    &quot;CraftBukkit#[插件服]Craft Bukkit 是一个老牌的 Minecraft 服务端,支持大部分插件,功能比较完善,目前是更新比较快的几个服务端之一 这个服务端容易出现一些性能问题,如果你的服务器经常在日志中出现“Can&apos;t keep up”之类的报错,可以考虑使用 Spigot、PaperSpigot 等服务端 &quot;,
        ///    &quot;Minecraft_Se [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string ServerTips {
            get {
                return ResourceManager.GetString("ServerTips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 {
        ///  &quot;Files&quot;: {
        ///    &quot;WorkingPath&quot;: &quot;&quot;,
        ///    &quot;JavaPath&quot;: &quot;&quot;,
        ///    &quot;UseDefaultDirectory&quot;: &quot;false&quot;,
        ///    &quot;DownloadForm&quot;: &quot;XINGAPI&quot;,
        ///    &quot;DownloadFilesPath&quot;:&quot;&quot;
        ///  },
        ///  &quot;JVM&quot;: {
        ///    &quot;Memory&quot;: &quot;1024&quot;
        ///  }
        ///} 的本地化字符串。
        /// </summary>
        internal static string String1 {
            get {
                return ResourceManager.GetString("String1", resourceCulture);
            }
        }
    }
}
